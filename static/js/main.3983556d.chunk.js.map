{"version":3,"sources":["context/global.js","context/appreducer.js","transaction/fetchtransactions.js","account/accountservice.js","transaction/summary.js","transaction/balancesummary.js","transaction/addtransaction.js","dashboard/dashboard.js","hooks/useevents.js","account/signup.js","home/home.js","dashboard/nav.js","dashboard/about.js","common/footer.js","account/logout.js","account/googlelogin.js","App.js","reportWebVitals.js","index.js"],"names":["initialState","user","token","transactions","error","eventSource","fetchTransactions","GlobalProvider","apiBaseUri","children","AccountService","login","googleLogin","AppReducer","state","action","type","payload","transaction","buildAppReducer","getTransactions","a","fetch","headers","Authorization","mode","response","json","buildFetchTransactions","useReducer","dispatch","dispatchLogin","doLogin","username","password","message","doGoogleLogin","profile","credential","GlobalContext","Provider","value","doLogout","window","google","accounts","id","disableAutoSelect","doAddTransaction","method","body","JSON","stringify","then","ok","statusText","catch","createContext","auth","loggedIn","jwt","decode","email","familyName","givenName","name","picture","length","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","sort","prev","next","Date","parse","timestamp","slice","map","row","description","toLocaleDateString","toLocaleTimeString","sender","receiver","amount","Typography","variant","component","color","align","calculateBalance","filter","txn","getReceivedTransactions","reduce","balance","x","getSentTransactions","BalanceSummary","className","Math","abs","toFixed","AddTransaction","useState","open","setOpen","useContext","formik","useFormik","initialValues","deposit","transfer","onSubmit","values","actions","input","console","log","addTransaction","setSubmitting","handleClose","Box","justifyContent","display","Fab","onClick","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","handleSubmit","TextField","label","onChange","handleChange","DialogActions","Button","txns","fullTransactionList","uri","eventName","events","setEvents","eventHandler","data","event","useEffect","EventSource","withCredentials","addEventListener","close","useEvents","concat","Container","margin","size","RefreshRounded","to","validate","errors","test","setTimeout","alert","isSubmitting","placeholder","disabled","signup","googleClientId","href","icon","faCoins","Avatar","alt","src","faUser","columns","field","headerName","width","editable","sortable","valueGetter","params","getValue","rows","lastName","firstName","age","maxWidth","style","height","pageSize","LoginPanel","buttonDiv","clientId","useRef","oneTap","setOneTap","useScript","loading","onSuccess","initialize","client_id","callback","context","auto_select","ux_mode","prompt","notification","getNotDisplayedReason","isNotDisplayed","isSkippedMoment","isDisplayed","renderButton","current","theme","ref","App","process","REACT_APP_GOOGLE_CLIENT_ID","userState","REACT_APP_AUTHURI","getUserProfile","isLoggedIn","getToken","fetchUserData","CssBaseline","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3983556d.chunk.js","sourcesContent":["import buildAppReducer from './appreducer'\nimport React, { createContext, useReducer } from 'react'\nimport AccountService from '../account/accountservice'\nimport buildFetchTransactions from '../transaction/fetchtransactions'\n\nconst initialState = {\n  user: null,\n  token: null,\n  transactions: [],\n  error: null,\n  eventSource: null,\n  fetchTransactions: () => {},\n}\n\nexport const GlobalProvider = ({ apiBaseUri, children }) => {\n  const { login, googleLogin } = AccountService({ apiBaseUri })\n\n  const AppReducer = buildAppReducer({ apiBaseUri })\n  const getTransactions = buildFetchTransactions({ apiBaseUri })\n\n  const [state, dispatch] = useReducer(AppReducer, initialState)\n\n  const fetchTransactions = async ({ token }) => {\n    const transactions = await getTransactions({ token })\n\n    dispatch({ type: 'FETCH_TRANSACTIONS', payload: transactions })\n  }\n  const dispatchLogin = (user) => {\n    dispatch({ type: 'LOGIN', payload: { user: user.user } })\n\n    const { token } = user.user\n    fetchTransactions({ token })\n  }\n  const doLogin = async (username, password) => {\n    try {\n      const user = await login(username, password)\n\n      dispatchLogin(user)\n    } catch (error) {\n      dispatch({ type: 'LOGIN', payload: { error: error.message } })\n    }\n  }\n  const doGoogleLogin = async (profile) => {\n    try {\n      const user = await googleLogin({\n        token: profile.credential,\n        username: 'Jamie',\n      })\n\n      dispatchLogin(user)\n    } catch (error) {\n      dispatch({ type: 'LOGIN', payload: { error: error.message } })\n    }\n  }\n\n  const doLogout = () => {\n    window.google.accounts.id.disableAutoSelect()\n    dispatch({ type: 'LOGOUT' })\n  }\n\n  const doAddTransaction = ({ transaction, token }) => {\n    fetch(apiBaseUri + '/transaction/', {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify(transaction),\n    })\n      .then(async (response) => {\n        if (response.ok) {\n          const { transaction } = await response.json()\n\n          dispatch({ type: 'ADD_TRANSACTION', payload: transaction })\n          return transaction\n        } else {\n          dispatch({\n            type: 'ADD_TRANSACTION',\n            payload: { error: response.statusText },\n          })\n        }\n\n        return\n      })\n      .catch((error) => {\n        dispatch({ type: 'ADD_TRANSACTION', payload: { error: error.message } })\n      })\n  }\n  return (\n    <GlobalContext.Provider\n      value={{\n        transactions: state.transactions,\n        user: state.user,\n        error: state.error,\n        eventSource: state.eventSource,\n        fetchTransactions,\n        doLogin,\n        doGoogleLogin,\n        doLogout,\n        doAddTransaction,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  )\n}\n\nexport const GlobalContext = createContext()\n","export default ({ apiBaseUri }) => {\n  return (state, action) => {\n    switch (action.type) {\n      case 'FETCH_TRANSACTIONS':\n        return {\n          ...state,\n          transactions: action.payload,\n        }\n      case 'SET_TOKEN':\n        return {\n          ...state,\n          token: action.payload,\n        }\n      case 'LOGIN':\n        return {\n          ...state,\n          user: action.payload.user,\n          eventSource: action.payload.eventSource,\n          error: action.payload?.error,\n        }\n      case 'LOGOUT':\n        return {\n          ...state,\n          user: null,\n          eventSource: null,\n        }\n      case 'ADD_TRANSACTION':\n        return {\n          ...state,\n          error: action.payload?.error,\n        }\n      case 'TRANSACTION_POSTED':\n        return {\n          ...state,\n          transactions: [...state.transactions, action.payload.transaction],\n        }\n      case 'EVENTS_READY':\n        return {\n          ...state,\n          eventSource: action.payload.eventSource,\n        }\n      default:\n        return state\n    }\n  }\n}\n","export default ({ apiBaseUri }) =>\n  async ({ token }) => {\n    const response = await fetch(`${apiBaseUri}/transaction/`, {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n      mode: 'cors',\n    })\n    return await response.json()\n  }\n","import { useContext } from 'react'\nimport { GlobalContext } from '../context/global'\nimport jwt from 'jsonwebtoken'\n\nexport default ({ apiBaseUri = '', auth = '/auth' } = {}) => {\n  //const [user, setUser] = userState\n  /*\n  const fetchUserData = async (username) => {\n    const { token } = user\n    console.log(`fetch user data ${token}`)\n\n    const response = await fetch(`${apiBaseUri}/user/${username}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    })\n    return await response.json()\n  }\n  const getUserProfile = async () => {\n    await sendJsonToServer({\n      path: '/user/' + user?.username,\n      method: 'GET',\n      success: (data) => data,\n    })\n    return <p>Hello</p>\n  }\n  const sendJsonToServer = ({\n    path,\n    data = null,\n    method = 'POST',\n    success = console.log,\n    failure = console.error,\n  }) =>\n    fetch(apiBaseUri + path, {\n      method,\n      mode: 'cors',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: data ? JSON.stringify(data) : null,\n    }).then(async (response) => {\n      if (response.ok) {\n        const payload = await response.json()\n        return success(payload)\n      }\n      return failure({ error: response.statusText })\n    })\n*/\n  const login = (username, password) =>\n    fetch(apiBaseUri + auth + '/login', {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ username, password }),\n    })\n      .then(async (response) => {\n        if (response.ok) {\n          const { token } = await response.json()\n          const user = {}\n          user.username = username\n          user.token = token\n          user.loggedIn = true\n\n          return { user }\n        }\n        return { error: response.statusText }\n      })\n      .catch((error) => ({ error: error.message }))\n  const googleLogin = ({ token, username }) =>\n    fetch(`${apiBaseUri}${auth}/google?token=${token}`, {\n      method: 'GET',\n      mode: 'cors',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then(async (response) => {\n        if (response.ok) {\n          const { token } = await response.json()\n          const { email, familyName, givenName, name, picture, username } =\n            jwt.decode(token)\n          const user = {\n            email,\n            familyName,\n            givenName,\n            name,\n            picture,\n            username,\n            token,\n            loggedIn: true,\n          }\n\n          return { user }\n        }\n        return { error: response.statusText }\n      })\n      .catch((error) => ({ error: error.message }))\n\n  const signup = async ({\n    username,\n    password,\n    firstName,\n    lastName,\n    dateOfBirth,\n    email,\n  }) => {\n    console.log(\n      `Username ${username}\\nPassword ${password}\\nemail ${email}\\nFirst name ${firstName}\\nLast name ${lastName}\\nDate of birth ${dateOfBirth}`\n    )\n    return new Promise((resolve, reject) => {\n      setTimeout(() => resolve({}), 3000)\n    })\n  }\n\n  return { login, googleLogin }\n}\n","import Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Typography from '@material-ui/core/Typography'\n\nexport default ({ transactions }) => (\n  <>\n    {transactions.length ? (\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Activity</TableCell>\n              <TableCell>Date</TableCell>\n              <TableCell>Time</TableCell>\n              <TableCell>From</TableCell>\n              <TableCell>To</TableCell>\n              <TableCell>Amount</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {transactions\n              .sort(\n                (prev, next) =>\n                  Date.parse(next.timestamp) - Date.parse(prev.timestamp)\n              )\n              .slice(0, 5)\n              .map((row) => (\n                <TableRow key={row.id}>\n                  <TableCell>{row.description}</TableCell>\n                  <TableCell>\n                    {new Date(row.timestamp).toLocaleDateString()}\n                  </TableCell>\n                  <TableCell>\n                    {new Date(row.timestamp).toLocaleTimeString()}\n                  </TableCell>\n                  <TableCell>{row.sender}</TableCell>\n                  <TableCell>{row.receiver}</TableCell>\n                  <TableCell>&#163;{row.amount}</TableCell>\n                </TableRow>\n              ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    ) : (\n      <Typography\n        variant=\"h3\"\n        component=\"h3\"\n        color=\"textSecondary\"\n        align=\"center\"\n      >\n        No transactions\n      </Typography>\n    )}\n  </>\n)\n","import { Typography, Card } from '@material-ui/core'\n\nconst getReceivedTransactions = ({ user, transactions }) =>\n  transactions.filter((txn) => txn.receiver === user)\nconst getSentTransactions = ({ user, transactions }) =>\n  transactions.filter((txn) => txn.sender === user)\n\nconst calculateBalance = ({ user, transactions }) =>\n  user\n    ? getReceivedTransactions({ user, transactions }).reduce(\n        (balance, x) => balance + x.amount,\n        0\n      ) -\n      getSentTransactions({ user, transactions }).reduce(\n        (balance, x) => balance + x.amount,\n        0\n      )\n    : 0\n\nconst BalanceSummary = ({ transactions, user }) => (\n  <Typography variant=\"h4\" component=\"h4\" color=\"textSecondary\" align=\"center\">\n    {user.givenName} your Balance is{' '}\n    <span\n      className={\n        calculateBalance({ transactions, user: user.username }) < 0\n          ? 'error'\n          : ''\n      }\n    >\n      &#163;\n      {Math.abs(\n        calculateBalance({ transactions, user: user.username }).toFixed(2)\n      )}{' '}\n      {calculateBalance({ transactions, user: user.username }) < 0 ? 'DR' : ''}\n    </span>\n  </Typography>\n)\nexport { BalanceSummary }\n","import { useContext, useState } from 'react'\nimport { GlobalContext } from '../context/global'\nimport {\n  TextField,\n  RadioGroup,\n  FormControlLabel,\n  FormLabel,\n  Switch,\n  Radio,\n  Button,\n  Box,\n  Fab,\n} from '@material-ui/core'\nimport AddIcon from '@material-ui/icons/Add'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport { Formik, Form, Field, useFormik, FormikProvider } from 'formik'\n\nconst AddTransaction = () => {\n  const [open, setOpen] = useState(false)\n\n  const {\n    user: { token, username },\n    doAddTransaction,\n    error,\n  } = useContext(GlobalContext)\n\n  const addTransaction = (input) => {\n    const transaction = {\n      sender: username,\n      receiver: input.receiver,\n      amount: input.amount,\n      description: input.description,\n    }\n    console.log(JSON.stringify(transaction))\n    doAddTransaction({ transaction, token })\n  }\n\n  const formik = useFormik({\n    initialValues: {\n      description: '',\n      amount: 0,\n      receiver: '',\n      sender: username,\n      deposit: true,\n      transfer: false,\n      type: 'deposit',\n    },\n    onSubmit: (values, actions) => {\n      addTransaction(values)\n      actions.setSubmitting(false)\n      handleClose()\n    },\n  })\n\n  const handleClose = () => setOpen(false)\n  return (\n    <Box justifyContent=\"center\" display=\"flex\">\n      <br />\n      <Fab\n        color=\"primary\"\n        aria-label=\"add\"\n        variant=\"extended\"\n        onClick={() => setOpen(true)}\n      >\n        <AddIcon />\n        Add Transaction\n      </Fab>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Transfer money</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Transfer money to another person.\n          </DialogContentText>\n          <form onSubmit={formik.handleSubmit}>\n            <TextField\n              name=\"receiver\"\n              type=\"text\"\n              label=\"Receiver\"\n              value={formik.values.receiver}\n              onChange={formik.handleChange}\n            />\n            <br />\n            <TextField\n              name=\"amount\"\n              type=\"number\"\n              label=\"Amount\"\n              value={formik.values.amount}\n              onChange={formik.handleChange}\n            />\n            <br />\n            <TextField\n              name=\"description\"\n              label=\"Description (optional)\"\n              value={formik.values.description}\n              onChange={formik.handleChange}\n            />\n            <br />\n            <DialogActions>\n              <Button onClick={handleClose} color=\"primary\">\n                Cancel\n              </Button>\n              <Button variant=\"contained\" type=\"submit\" color=\"primary\">\n                Send\n              </Button>\n            </DialogActions>\n            <p className=\"error\">{error}</p>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </Box>\n  )\n}\n\nexport default AddTransaction\n","import { useContext, useEffect, useState } from 'react'\nimport { Container, Paper, Card, Box, Button, Fab } from '@material-ui/core'\nimport { TransactionSummary, BalanceSummary } from '../transaction/'\nimport AddTransaction from '../transaction/addtransaction'\nimport { GlobalContext } from '../context/global'\nimport { Redirect } from 'react-router-dom'\nimport { useEvents } from '../hooks/useevents'\nimport { RefreshRounded } from '@material-ui/icons'\n\nexport default ({ apiBaseUri }) => {\n  const {\n    transactions: txns,\n    user,\n    doAddTransaction,\n    fetchTransactions,\n  } = useContext(GlobalContext)\n\n  let fullTransactionList = []\n\n  if (user) {\n    const uri = `${apiBaseUri}/events/?token=${user.token}`\n    const eventName = 'transactionPosted'\n\n    const transactions = useEvents({ uri, eventName })\n    fullTransactionList = transactions.concat(txns)\n  }\n  //fetchTransactions({ token: user.token })\n\n  return user ? (\n    <Container>\n      <Box display=\"grid\" margin=\"auto\">\n        <BalanceSummary transactions={fullTransactionList} user={user} />\n        <TransactionSummary transactions={fullTransactionList} />\n        <Fab\n          color=\"primary\"\n          aria-label=\"refresh\"\n          size=\"small\"\n          onClick={() => fetchTransactions({ token: user.token })}\n        >\n          <RefreshRounded />\n        </Fab>\n        <AddTransaction addTransaction={doAddTransaction} />\n      </Box>\n    </Container>\n  ) : (\n    <Redirect to=\"/login\" />\n  )\n}\n","import { useState, useEffect } from 'react'\n\nexport const useEvents = ({ uri, eventName }) => {\n  const [events, setEvents] = useState([])\n\n  const eventHandler = ({ data }) => {\n    const event = JSON.parse(data)\n    setEvents([...events, event])\n    console.log(JSON.stringify(events))\n  }\n  useEffect(() => {\n    let eventSource = new EventSource(uri, { withCredentials: false })\n\n    eventSource.addEventListener(eventName, eventHandler)\n\n    return () => eventSource.close()\n  }, [events])\n\n  return events\n}\n","import { useState } from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\n\nexport default () => (\n  <Formik\n    initialValues={{ name: '', email: '' }}\n    validate={(values) => {\n      const errors = {}\n      if (!values.email) {\n        errors.email = 'Email address is required'\n      } else if (\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n      ) {\n        errors.email = 'Invalid email address'\n      }\n      if (!values.name) {\n        errors.name = 'Name is required'\n      }\n      return errors\n    }}\n    onSubmit={(values, { setSubmitting }) => {\n      setTimeout(() => {\n        alert(JSON.stringify(values, null, 2))\n        setSubmitting(false)\n      }, 400)\n    }}\n  >\n    {({ isSubmitting }) => (\n      <Form>\n        <div className=\"form-control\">\n          <Field type=\"text\" name=\"name\" placeholder=\"Your name\" />\n          <ErrorMessage name=\"name\" component=\"div\" className=\"form-error\" />\n        </div>\n        <div className=\"form-control\">\n          <Field type=\"email\" name=\"email\" placeholder=\"Email address\" />\n          <ErrorMessage name=\"email\" component=\"div\" className=\"form-error\" />\n        </div>\n        <div className=\"form-control\">\n          <button\n            className=\"btn btn-primary\"\n            type=\"submit\"\n            disabled={isSubmitting}\n          >\n            Submit\n          </button>\n        </div>\n      </Form>\n    )}\n  </Formik>\n)\n","import SignUpForm from '../account/signup'\n\nexport default ({ signup, googleClientId }) => (\n  <section className=\"showcase\">\n    <div className=\"container grid\">\n      <div className=\"showcase-text\">\n        <h2>Heading</h2>\n        <p>\n          Manage your money Lorem ipsum dolor sit amet, consectetur adipiscing\n          elit. Sed eget nibh ipsum. Praesent in maximus neque. Donec justo\n          augue, gravida sit amet elementum non, vestibulum ac nulla. Aliquam\n          suscipit ipsum eget elit cursus, in laoreet nunc porta. Maecenas\n          dignissim diam sapien, sed fringilla eros imperdiet sed. Nullam\n          iaculis imperdiet diam, eget tempor tortor tincidunt quis. Duis\n          blandit erat id finibus interdum.\n        </p>\n        <a href=\"#features\" className=\"btn btn-outline\">\n          Read more\n        </a>\n      </div>\n      <div className=\"showcase-form card\">\n        <h3>Sign up</h3>\n        <SignUpForm signup={signup} />\n      </div>\n    </div>\n  </section>\n)\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUser, faCoins } from '@fortawesome/free-solid-svg-icons'\nimport { useContext } from 'react'\nimport { GlobalContext } from '../context/global'\nimport { Avatar } from '@material-ui/core'\nimport { Redirect, Link } from 'react-router-dom'\n\nexport default function () {\n  const { user } = useContext(GlobalContext)\n\n  return (\n    <div className=\"navbar\">\n      <div className=\"container flex\">\n        <h1 className=\"logo\">\n          <Link to={user?.loggedIn ? '/dashboard' : '/'}>\n            <FontAwesomeIcon icon={faCoins} />\n            <span>Money Manager</span>\n          </Link>\n        </h1>\n\n        <nav>\n          <ul>\n            {!user?.loggedIn ? (\n              <li>\n                <FontAwesomeIcon icon={faUser}></FontAwesomeIcon>\n                <Link to=\"/login\">Login</Link>\n              </li>\n            ) : (\n              <>\n                <li>\n                  {' '}\n                  {user ? (\n                    <>\n                      <Avatar alt={user.name} src={user.picture} />\n                    </>\n                  ) : null}\n                </li>\n                <li>\n                  <Link to=\"/logout\">Log out</Link>\n                </li>\n              </>\n            )}\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n          </ul>\n        </nav>\n      </div>\n    </div>\n  )\n}\n","import { Container } from '@material-ui/core'\nimport Button from '@material-ui/core/Button'\nimport { DataGrid } from '@material-ui/data-grid'\nconst columns = [\n  { field: 'id', headerName: 'ID', width: 90 },\n  {\n    field: 'firstName',\n    headerName: 'First name',\n    width: 150,\n  },\n  {\n    field: 'lastName',\n    headerName: 'Last name',\n    width: 150,\n    editable: true,\n  },\n  {\n    field: 'age',\n    headerName: 'Age',\n    type: 'currency',\n    width: 110,\n    editable: true,\n  },\n  {\n    field: 'fullName',\n    headerName: 'Full name',\n    description: 'This column has a value getter and is not sortable.',\n    sortable: false,\n    width: 160,\n    valueGetter: (params) =>\n      `${params.getValue(params.id, 'firstName') || ''} ${\n        params.getValue(params.id, 'lastName') || ''\n      }`,\n  },\n]\n\nconst rows = [\n  { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },\n  { id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 42 },\n  { id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 45 },\n  { id: 4, lastName: 'Stark', firstName: 'Arya', age: 16 },\n  { id: 5, lastName: 'Targaryen', firstName: 'Daenerys', age: null },\n  { id: 6, lastName: 'Melisandre', firstName: null, age: 150 },\n  { id: 7, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },\n  { id: 8, lastName: 'Frances', firstName: 'Rossini', age: 36 },\n  { id: 9, lastName: 'Roxie', firstName: 'Harvey', age: 65 },\n]\nexport default () => (\n  <Container maxWidth=\"lg\" style={{ height: 400 }}>\n    <DataGrid rows={rows} columns={columns} pageSize={5} />\n  </Container>\n)\n","export default () => <footer className=\"footer\"><div>Copyright &copy; 2021</div></footer>","import { useState, useContext } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { Loader } from '../common/loader'\nimport { GlobalContext } from '../context/global'\n\nexport default () => {\n  const { doLogout } = useContext(GlobalContext)\n\n  doLogout()\n\n  return <Redirect to=\"/\" />\n}\n","import { useRef, useContext, useEffect, useState } from 'react'\nimport { GlobalContext } from '../context/global'\nimport useScript from 'react-script-hook'\nimport { Redirect } from 'react-router-dom'\n\nconst LoginPanel = ({ children }) => <div>{children}</div>\nexport default ({ clientId } = {}) => {\n  const buttonDiv = useRef(null)\n\n  const [oneTap, setOneTap] = useState(true)\n  const { user, doGoogleLogin, error } = useContext(GlobalContext)\n\n  const [loading] = useScript({\n    src: 'https://accounts.google.com/gsi/client',\n  })\n\n  const onSuccess = (response) => {\n    doGoogleLogin(response)\n  }\n\n  useEffect(() => {\n    if (!loading) {\n      window.google.accounts.id.initialize({\n        client_id:\n          '557258334399-4vpeqbtm8iiu0f448sgl7pet75fo54u0.apps.googleusercontent.com',\n        callback: onSuccess,\n        context: ['signin', 'use'],\n        auto_select: true,\n        ux_mode: 'popup',\n      })\n\n      if (oneTap) {\n        try {\n          window.google.accounts.id.prompt((notification) => {\n            console.log(notification.getNotDisplayedReason())\n\n            if (\n              notification.isNotDisplayed() ||\n              notification.isSkippedMoment()\n            ) {\n              console.log('Render')\n              setOneTap(notification.isDisplayed())\n              window.google.accounts.id.renderButton(buttonDiv.current, {\n                theme: 'outline',\n                size: 'large',\n              })\n            }\n          })\n        } catch (error) {\n          console.log('ryr')\n          console.error(error)\n        }\n      }\n    }\n  }, [loading, oneTap])\n\n  return (\n    <div>\n      {user?.loggedIn ? (\n        <Redirect to=\"/dashboard\" />\n      ) : !oneTap ? (\n        <LoginPanel>\n          <div ref={buttonDiv}></div>\n        </LoginPanel>\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  )\n  // return <div>{user ? <Redirect to=\"/dashboard\" /> : 'Loading'}</div>\n}\n","import React, { useState, useEffect } from 'react'\nimport '@fontsource/roboto'\nimport AccountService from './account/accountservice'\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\nimport Dashboard from './dashboard/dashboard'\nimport Home from './home/home'\nimport Nav from './dashboard/nav'\nimport About from './dashboard/about'\nimport Footer from './common/footer'\nimport Login from './account/login'\nimport Logout from './account/logout'\nimport './App.css'\nimport { GlobalProvider } from './context/global'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport GoogleLogin from './account/googlelogin'\n\nconst App = ({\n  apiBaseUri = process.env.REACT_APP_APIBASEURI || '',\n  googleClientId = process.env.REACT_APP_GOOGLE_CLIENT_ID,\n}) => {\n  const userState = useState({ loggedIn: false })\n\n  const { login, signup, getUserProfile, isLoggedIn, getToken, fetchUserData } =\n    AccountService({\n      apiBaseUri,\n      userState,\n      auth: process.env.REACT_APP_AUTHURI,\n    })\n\n  return (\n    <GlobalProvider apiBaseUri={apiBaseUri}>\n      <CssBaseline />\n      <Router>\n        <Nav />\n\n        <Switch>\n          <Route exact path=\"/\">\n            <Home signup={signup} clientId={googleClientId} />\n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/logout\">\n            <Logout />\n          </Route>\n          <Route path=\"/dashboard\">\n            <Dashboard apiBaseUri={apiBaseUri} />\n          </Route>\n          <Route path=\"/login\">\n            <GoogleLogin clientId={googleClientId} />\n          </Route>\n        </Switch>\n      </Router>\n      <Footer />\n    </GlobalProvider>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}